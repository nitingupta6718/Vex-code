/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2000                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


void autonomous(void) {
  LeftmotorC.spin(forward,90,percent);
leftMotorA.spin(forward,90,percent);
rightMotorA.spin(forward,90,percent);
rigtmotorC.spin(forward,90,percent);
 wait(1.45,seconds);
 hook1.spin(reverse,90,percent);
 wait(0.3,seconds);
LeftmotorC.spin(reverse,90,percent);
leftMotorA.spin(reverse,90,percent);
rightMotorA.spin(reverse,90,percent);
rigtmotorC.spin(reverse,90,percent);
 wait(1.25,seconds);
 wait(0.10,seconds);
LeftmotorC.spin(forward,90,percent);
leftMotorA.spin(forward,90,percent);
rightMotorA.spin(reverse,90,percent);
rigtmotorC.spin(reverse,90,percent);
  wait(0.40,seconds);
LeftmotorC.spin(reverse,90,percent);
leftMotorA.spin(reverse,90,percent);
rightMotorA.spin(reverse,90,percent);
rigtmotorC.spin(reverse,90,percent);
wait(0.1,seconds);
backpack.spin(forward,90,percent);
wait(0.6, seconds);
 LeftmotorC.stop();
leftMotorA.stop();
rightMotorA.stop();
rigtmotorC.stop();
 hook1.stop();
 backpack.stop();
 
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  #include "vex.h"

using namespace vex;
using signature = vision::signature;
using code = vision::code;

// A global instance of brain used for printing to the V5 Brain screen


// VEXcode device constructors
/*
motor leftMotorA = motor(PORT1, ratio18_1, true);
motor leftMotorB = motor(PORT12, ratio18_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT13, ratio18_1, false);
motor rightMotorB = motor(PORT2, ratio18_1, false);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);
motor_group VBDriveSmart= motor_group (rightMotorA, rightMotorB, leftMotorA, leftMotorB);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);
motor LeftmotorC = motor(PORT4, ratio18_1, true);
motor rigtmotorC = motor(PORT11, ratio18_1, false);
motor Rightmotorthere = motor(PORT18, ratio18_1, false);
motor Lift1 = motor(PORT16, ratio36_1, false);
motor Lift2 = motor(PORT18, ratio36_1, false);
*/
// VEXcode generated functions
// define variable for remote controller enable/disable

bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool Controller1LeftShoulderControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller1 = true;
bool DrivetrainRNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1

  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis3 + Axis1
      // right = Axis3 - Axis1
      //int drivetrainLeftSideSpeed = Controller1.Axis3.position()+Controller1.Axis1.position();
      //int drivetrainRightSideSpeed = Controller1.Axis3.position()-Controller1.Axis1.position();
      int drivetrainRightSideSpeed = Controller1.Axis1.position();
      int drivetrainLeftSideSpeed = Controller1.Axis1.position();

      leftMotorA.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);
      LeftmotorC.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);
      rightMotorA.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);
      rigtmotorC.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);
      LeftmotorC.spin(forward);
      leftMotorA.spin(forward);
      rightMotorA.spin(forward);
      rigtmotorC.spin(forward );

      /*
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 20 && drivetrainLeftSideSpeed > -20) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller1) {
          // stop the left drive motor
          LeftmotorC.stop();
          leftMotorA.stop();
          leftMotorB.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
        DrivetrainLNeedsToBeStopped_Controller1 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 20 && drivetrainRightSideSpeed > -20) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller1) {
          // stop the right drive motor
          rigtmotorC.stop();
          rightMotorA.stop();
          rightMotorB.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
        DrivetrainRNeedsToBeStopped_Controller1 = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainLNeedsToBeStopped_Controller1) {
        leftMotorA.setVelocity(drivetrainLeftSideSpeed, percent);
        
        LeftmotorC.setVelocity(drivetrainLeftSideSpeed, percent);
        leftMotorA.spin(reverse);
        LeftmotorC.spin(reverse);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainRNeedsToBeStopped_Controller1) {
        rightMotorA.setVelocity(drivetrainRightSideSpeed, percent);
       
        rigtmotorC.setVelocity(drivetrainRightSideSpeed, percent);
        rigtmotorC.spin(forward);
        rightMotorA.spin(forward);
        
      }
     */
    }
    
    if(Controller1.ButtonR2.pressing()) {
        Lift1.spin(reverse);
        Lift2.spin(forward);
        Lift1.setVelocity(-300, percent);
        Lift2.setVelocity(300, percent);
    } else if (Controller1.ButtonR1.pressing()) {
        Lift1.spin(forward);
        Lift2.spin(reverse);
        Lift1.setVelocity(300, percent);
        Lift2.setVelocity(-300, percent);
    }  else {
      Lift1.stop();
      Lift2.stop();}
    if(Controller1.ButtonL1.pressing()) {
        hook1.spin(forward);
        
        hook1.setVelocity(300, percent);
        
    } else if (Controller1.ButtonL2.pressing()) {
    
         hook1.spin(reverse);
       
        hook1.setVelocity(-300, percent);
    } else{
        hook1.stop();
    }  
    
      if(Controller1.ButtonB.pressing()) {
        backpack.spin(forward);
        backpack.setVelocity(300, percent);
      }
      else if (Controller1.ButtonA.pressing()) {
        backpack.spin(reverse);
       
        backpack.setVelocity(-300, percent);
      }
      else {
        backpack.stop();}
      
      
    // wait before repeating the process
    wait(20, msec);
  }
  
}

/**
 * Used to initialize code/tasks/devices added using tools in VEXcode Pro.
 * 
 * This should be called at the start of your int main function.
 */


//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}


/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2000                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

/*int error;
int total_error = 0;
int Prev_error = 0;
int derviation;
int desired_value = 200;
int leftmotorposition = LeftmotorC.position(degrees);
int rightmotorposition = rightmotorC.position(degrees);
int  KP = 1.0;
int kI = 1.0;
int KD = 1.0;

int average_position = (leftmotorposition + rightmotorposition)/2;
*/
// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
bool Claw = false;
void Claw_function_Opean (void) {
  #include "vex.h"
  

using namespace vex;
using signature = vision::signature;
using code = vision::code;
while(true){
 hook1.stop(hold);
        
        Claw = true;
}
}
void Claw_function_closed (void) {
  #include "vex.h"
  

using namespace vex;
using signature = vision::signature;
using code = vision::code;
while(true){
if(Claw = true) {hook1.spin(forward);
        hook1.setVelocity(75, percent);
        
        Claw = false;
}
else if (Claw = false) {
hook1.stop(coast);
        
        Claw = true;
}
}
}
void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


void autonomous(void) {

/*while(average_position < desired_value ){
Prev_error = error;
error = average_position - desired_value;
derviation = error - Prev_error;
total_error += error;
double lateralMotorpower = error * KP + derviation *KD +total_error * kI;
LeftDriveSmart.spin(forward,lateralMotorpower,percent);
RightDriveSmart.spin(forward,lateralMotorpower,percent);  
}
if(average_position = desired_value-5 ){
LeftDriveSmart.setStopping(coast );
RightDriveSmart.setStopping(coast );
}
while(average_position > desired_value ){
  Prev_error = error;
error = average_position - desired_value;
derviation = error - Prev_error;
total_error += error;
double lateralMotorpower = error * KP + derviation *KD +total_error * kI;
LeftDriveSmart.spin(reverse,lateralMotorpower,percent);
RightDriveSmart.spin(reverse,lateralMotorpower,percent);  
}
if(average_position = desired_value-5 ){
LeftDriveSmart.setStopping(coast );
RightDriveSmart.setStopping(coast );
}
while(average_position = desired_value ){
LeftDriveSmart.setStopping(hold );
RightDriveSmart.setStopping(hold );
}
*/
}
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
void usercontrol(void) {
  #include "vex.h"

using namespace vex;
using signature = vision::signature;
using code = vision::code;

// A global instance of brain used for printing to the V5 Brain screen


// VEXcode device constructors
/*
motor leftMotorA = motor(PORT1, ratio18_1, true);
motor leftMotorB = motor(PORT12, ratio18_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT13, ratio18_1, false);
motor rightMotorB = motor(PORT2, ratio18_1, false);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);

drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);
motor LeftmotorC = motor(PORT4, ratio18_1, true);
motor rigtmotorC = motor(PORT11, ratio18_1, false);
motor Rightmotorthere = motor(PORT18, ratio18_1, false);
motor Lift1 = motor(PORT16, ratio36_1, false);
motor Lift2 = motor(PORT18, ratio36_1, false);
*/
// VEXcode generated functions
// define variable for remote controller enable/disable

bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool Controller1LeftShoulderControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller1 = true;
bool DrivetrainRNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1

  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    
      leftMotorA.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);
      LeftmotorC.setVelocity(Controller1.Axis3.position()-Controller1.Axis1.position(), percent);
      rightMotorA.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);
      rightmotorC.setVelocity(Controller1.Axis3.position()+Controller1.Axis1.position(), percent);
      LeftmotorC.spin(forward);
      leftMotorA.spin(forward);
      rightMotorA.spin(forward);
      rightmotorC.spin(forward );
    if(Controller1.ButtonB.pressing()) {
        test.set(true);
    
      }
      else if (Controller1.ButtonA.pressing()) {
         test.set(false);
      
      } 
      
    
    

    
    
    

    if(Controller1.ButtonR2.pressing()) {
        Lift1.spin(reverse);
        Lift2.spin(forward);
        Lift1.setVelocity(-300, percent);
        Lift2.setVelocity(300, percent);
    } else if (Controller1.ButtonR1.pressing()) {
        Lift1.spin(forward);
        Lift2.spin(reverse);
        Lift1.setVelocity(300, percent);
        Lift2.setVelocity(-300, percent);
    }  else {
      Lift1.stop();
      Lift2.stop();}
      
  
    
      
 
       if(Controller1.ButtonUp.pressing()) {
      Ring.spin(forward);
        
      Ring.setVelocity(100, percent);
    
      }
        else if (Controller1.ButtonDown.pressing()) {
      Ring.spin(reverse);
       
      Ring.setVelocity(-100, percent);
      
      } 
      while(Claw = true){
        Controller1.ButtonX.pressed(Claw_function_closed);
      }
      while(Claw = false){
        Controller1.ButtonX.pressed(Claw_function_Opean);
      }
    // wait before repeating the process
    wait(20, msec);
  }
}
  


/**
 * Used to initialize code/tasks/devices added using tools in VEXcode Pro.
 * 
 * This should be called at the start of your int main function.
 */


//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
